import logging
import time

from parser.models import KufarItems

from bot.bot_config import bot, keyboards_cats, user_data
from bot.models import BotUser
from bot.services import send_error_msg_not_registered

from bot.keyboards.inlinekeyboards import inline_keyboard_city
from bot.keyboards.replykeyoboards import (reply_keyboard_back_gen_menu,
                                           reply_keyboard_with_gen_menu_and_next,
                                           reply_keyboard_gen_menu)

from django.db.models import Q

from telebot import types

from bot.services import send_message

logger = logging.getLogger(__name__)


def get_query(message):
    user_data.reset_data()
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = reply_keyboard_gen_menu()
        return bot.send_message(message.from_user.id, 'üëÄ *–í—ã–±–µ—Ä–∏—Ç–µ* –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª',
                                reply_markup=markup, parse_mode='Markdown')

    if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        user_data.deleted = True
        markup_inline = keyboards_cats[user_data.category]
        bot.send_message(message.from_user.id, 'üí¨ *–í–≤–µ–¥–∏—Ç–µ* –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ *–≤—ã–±–µ—Ä–∏—Ç–µ*.',
                         reply_markup=markup_inline, parse_mode='Markdown')
        markup = reply_keyboard_with_gen_menu_and_next()
        bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ *–î–∞–ª–µ–µ*',
                         reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, get_title)

    elif message.text == '–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É':
        markup_inline = keyboards_cats[user_data.category]
        bot.send_message(message.from_user.id, 'üí¨ *–í–≤–µ–¥–∏—Ç–µ* –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ.',
                         reply_markup=markup_inline, parse_mode='Markdown')
        markup = reply_keyboard_with_gen_menu_and_next()
        bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ *–î–∞–ª–µ–µ*',
                         reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, get_title)

    elif message.text == '–ó–∞–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º':
        markup = reply_keyboard_gen_menu()
        user = BotUser.objects.get(telegram_id=message.from_user.id)
        if user_data.user_registered:
            if user.slots_for_searchitems > 0:
                user_data.search_item = True
                markup_inline = keyboards_cats[user_data.category]
                bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ.',
                                 reply_markup=markup_inline, parse_mode='Markdown')
                markup = reply_keyboard_with_gen_menu_and_next()
                bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ *–î–∞–ª–µ–µ*',
                                 reply_markup=markup, parse_mode='Markdown')
                bot.register_next_step_handler(message, get_title)
            else:
                return bot.send_message(message.from_user.id, '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=markup)
        else:
            return send_error_msg_not_registered(message)

    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('5')
        btn2 = types.KeyboardButton('10')
        btn3 = types.KeyboardButton('15')
        btn4 = types.KeyboardButton('20')
        btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id, 'üí¨ –°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?'
                                               '\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ *20*.'
                                               '\n–í—ã–±–µ—Ä–∏—Ç–µ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç *—á–∏—Å–ª–æ:*',
                         reply_markup=markup,
                         parse_mode="Markdown")
        bot.register_next_step_handler(message, get_message_quantity)

    elif message.text:
        markup = reply_keyboard_gen_menu()
        bot.register_next_step_handler(message, get_query)
        return bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç,'
                                                      ' üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)




def get_title(message):
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = reply_keyboard_gen_menu()
        return bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    markup = reply_keyboard_with_gen_menu_and_next()

    if not message.text == '–î–∞–ª–µ–µ':
        if not len(message.text) > 30:
            user_data.title = message.text
        else:
            bot.send_message(message.from_user.id, 'üí¨ *–û—à–∏–±–∫–∞!* –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—â–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤.'
                                                   ' –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: üí¨',
                             reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(message, get_title)

    bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.'
                                           '\n–§–æ—Ä–º–∞—Ç: *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞*(–ø—Ä–æ–±–µ–ª)*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞*'
                                           '\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é *–î–∞–ª–µ–µ*',
                     reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, get_price)


def get_price(message):
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = reply_keyboard_gen_menu()
        return bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    markup_inline = inline_keyboard_city()

    if not message.text == '–î–∞–ª–µ–µ':
        try:
            markup_inline = inline_keyboard_city()
            min_price, max_price = message.text.split(' ')
            user_data.min_price = int(min_price)
            user_data.max_price = int(max_price)
            if (user_data.min_price < 0 or user_data.min_price > 20_000
                    or user_data.max_price < 0 or user_data.max_price > 20_000):
                raise ValueError
            bot.send_message(message.from_user.id, 'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–î–∞–ª–µ–µ*,'
                                                   '\n–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –ë–µ–ª–∞—Ä—É—Å–∏.',
                             reply_markup=markup_inline, parse_mode="Markdown")
            bot.register_next_step_handler(message, get_city)
        except ValueError:
            bot.reply_to(message, 'üí¨ *–û—à–∏–±–∫–∞!* –í—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –±–æ–ª–µ–µ 20_000—Ä.'
                                  ' –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: ')
            bot.register_next_step_handler(message, get_price)
        except Exception:
            bot.reply_to(message, 'üí¨ *–û—à–∏–±–∫–∞!* –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')
            bot.register_next_step_handler(message, get_price)

    elif message.text == '–î–∞–ª–µ–µ':
        bot.send_message(message.from_user.id, 'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ *–≥–æ—Ä–æ–¥*, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–î–∞–ª–µ–µ*,'
                                               '\n–¥–ª—è *–ø–æ–∏—Å–∫–∞* –ø–æ –≤—Å–µ–π –ë–µ–ª–∞—Ä—É—Å–∏.',
                         reply_markup=markup_inline, parse_mode="Markdown")
        bot.register_next_step_handler(message, get_city)


def get_city(message):
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = reply_keyboard_gen_menu()
        return bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    if not message.text == '–î–∞–ª–µ–µ':
        user_data.city = message.text

    if user_data.search_item:
        return save_search_data_in_db(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('5')
    btn2 = types.KeyboardButton('10')
    btn3 = types.KeyboardButton('15')
    btn4 = types.KeyboardButton('20')
    btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.from_user.id, 'üí¨ –°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?'
                                           '\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ *20*.'
                                           '\n–í—ã–±–µ—Ä–∏—Ç–µ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç *—á–∏—Å–ª–æ:*',
                     reply_markup=markup,
                     parse_mode="Markdown")

    bot.register_next_step_handler(message, get_message_quantity)


def get_message_quantity(message):
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = reply_keyboard_gen_menu()
        return bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    if message.text.isdigit():
        msg_quantity = int(message.text)
        if msg_quantity > 20 or msg_quantity < 0:
            bot.send_message(message.from_user.id, 'üí¨ –û—à–∏–±–∫–∞!. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ä–µ–¥–Ω–µ–µ *10*.',
                             parse_mode="Markdown")
            msg_quantity = 10
    else:
        markup = reply_keyboard_back_gen_menu()
        bot.send_message(message, 'üí¨ *–û—à–∏–±–∫–∞!* –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: ',
                         reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, get_message_quantity)
    user_data.msg_quantity = msg_quantity
    get_query_data(message)


def get_query_data(message):
    qs = KufarItems.objects.filter(cat_id=user_data.category, deleted=user_data.deleted).order_by(
        '-date' if not user_data.deleted else "-time_create")
    filter_query = Q()
    if user_data.title:
        filter_query.add(Q(title__icontains=user_data.title), Q.AND)
    if user_data.min_price and user_data.max_price:
        filter_query.add(Q(base_price__gte=user_data.min_price, base_price__lte=user_data.max_price), Q.AND)
    if user_data.city:
        filter_query.add(Q(city__icontains=user_data.city), Q.AND)
    qs = qs.filter(filter_query)

    qs_generator = init_qs_generator(qs)
    markup = reply_keyboard_with_gen_menu_and_next()
    bot.send_message(message.from_user.id, f'üí¨ –ù–∞–π–¥–µ–Ω–æ {qs.count()} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. üëÄ\n\n', reply_markup=markup)
    bot.register_next_step_handler(message, query_data, qs_generator)


def query_data(message, qs_generator):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = reply_keyboard_gen_menu()
        return bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    count = 0
    while count != user_data.msg_quantity:
        try:
            query = next(qs_generator)
            send_message(user_id=message.from_user.id,
                         obj=query,
                         show_sold_items=user_data.deleted)

            count += 1
            time.sleep(0.2)
        except StopIteration:
            bot.send_message(message.from_user.id, 'üí¨ –ë–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π üëÄ',
                             reply_markup=reply_keyboard_back_gen_menu())
            return

        except Exception as ex:
            logger.error(f'Exception - {ex} in query_data')
            bot.send_message(message.from_user.id, 'üí¨ *–û—à–∏–±–∫–∞!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                                                   '\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help',
                             reply_markup=reply_keyboard_back_gen_menu(), parse_mode="Markdown")

    markup.add(f'–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {user_data.msg_quantity}', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.reply_to(message, 'üí¨ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é? ', reply_markup=markup)
    bot.register_next_step_handler(msg, query_data, qs_generator)


def init_qs_generator(qs):
    for q in qs:
        yield q


def save_search_data_in_db(message):
    markup = reply_keyboard_gen_menu()
    try:
        user = BotUser.objects.get(telegram_id=message.from_user.id)
        user.searchitems_set.create(title=user_data.title, min_price=user_data.min_price, max_price=user_data.max_price,
                                    city=user_data.city, category=user_data.category)
        user.slots_for_searchitems -= 1
        user.save(update_fields=['slots_for_searchitems'])
        return bot.send_message(message.from_user.id, 'üí¨ –ì–æ—Ç–æ–≤–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥. '
                                                      f'–î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤ {user.slots_for_searchitems}'
                                                      '\n/search', reply_markup=markup)

    except Exception as ex:
        logger.error(f'exception in save_search_data {ex}')
        return bot.send_message(message.from_user.id, 'üí¨ –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup)
