import logging
from collections import Counter

from django.db import IntegrityError
from parser.models import Category, KufarItems

from bot.bot_config import bot, bot_sub_menu, user_data
from bot.keyboards.inlinekeyboards import inline_keyboard_delete_search_item
from bot.keyboards.replykeyoboards import (reply_keyboard_back_gen_menu,
                                           reply_keyboard_back_gen_menu_and_next)
from bot.middlewares import get_query, get_category_from_bd
from bot.models import BotUser, FavoritesItems, SearchItems
from bot.services import send_error_msg_not_registered, send_message

from telebot import types

logger = logging.getLogger(__name__)


@bot.message_handler(commands=['start'])
def start(message):
    if BotUser.objects.filter(telegram_id=message.from_user.id).exists():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.user_registered = True
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞. üñ•')
    btn2 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã. üì±')
    btn3 = types.KeyboardButton('–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. üõ†')
    # btn4 = types.KeyboardButton('–•–æ–±–±–∏, —Å–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏–∑–º üéø')
    # btn5 = types.KeyboardButton('–ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó')

    markup.row(btn1, btn2)
    markup.row(btn3)
    bot.send_message(message.from_user.id, f"*{message.from_user.first_name}*. –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç üëã Kufar Bot",
                     reply_markup=markup, parse_mode='Markdown')
    bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')


@bot.message_handler(commands=['favorites'])
def show_favorites(message):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    markup = reply_keyboard_back_gen_menu()
    if user_data.user_registered:
        try:
            qs = BotUser.objects.get(telegram_id=message.from_user.id).favoritesitems_set.all()
            if not qs.exists():
                bot.send_message(message.from_user.id, text='üí¨ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.. ', reply_markup=markup)
            else:
                bot.send_message(message.from_user.id, text='üí¨ –í–æ—Ç —Å–ø–∏—Å–æ–∫:', reply_markup=markup)
                for q in qs:
                    item = KufarItems.objects.get(pk=q.pk_item)
                    send_message(user_id=message.from_user.id,
                                 obj=item,
                                 favorites=True)

        except Exception as ex:
            logger.error(f'Error --{ex}-- in show_favorites func')
            bot.send_message(message.from_user.id, text='üí¨ –û—à–∏–±–∫–∞! üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                                                        '\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help'
                                                        '\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô ')
            message.text = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            get_text_messages(message)
    else:
        send_error_msg_not_registered(message)


@bot.message_handler(commands=['register'])
def register_user(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if not user_data.user_registered:
        try:
            BotUser.objects.get(telegram_id=message.from_user.id)
            btn = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn)
            bot.send_message(chat_id=message.from_user.id,
                             text='üí¨ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üëç'
                                  '\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,'
                                  '\n*–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞* –≤ –º–µ–Ω—é –∫–æ–º–º–∞–Ω–¥ /start üÜô',
                             reply_markup=markup,
                             parse_mode='Markdown')
        except Exception:
            bot.send_message(message.from_user.id, text='üí¨ –ó–¥–æ—Ä–æ–≤–æ!üëè –Ø —Ä–∞–¥ —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. '
                                                        '–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, '
                                                        '–∞ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –µ—Å–ª–∏ '
                                                        '–æ–Ω–∏ –ø–æ–¥–µ—à–µ–≤–µ—é—Ç –∏–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–¥–∞–Ω—ã,'
                                                        '—è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ. üëç'
                                                        '\n\nüí¨ –¢–∞–∫ –∂–µ!, –≤ —Ä–∞–∑–¥–µ–ª–µ *–ò—â—É*, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å '
                                                        '–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –∏ —è —Å–æ–æ–±—â—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ—è–≤–∏—Ç—å—Å—è ‚ùóÔ∏è',
                             parse_mode='Markdown')
            markup.add('–î–∞', '–ù–µ—Ç')
            bot.send_message(message.from_user.id, 'üí¨ –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? ', reply_markup=markup, parse_mode='HTML')
            bot.register_next_step_handler(message, register_user_step2)
    else:
        bot.send_message(chat_id=message.from_user.id,
                         text='üí¨ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üëç')


def register_user_step2(message):
    try:
        BotUser.objects.create(telegram_id=message.from_user.id, name=message.from_user.first_name)
        bot.send_message(message.from_user.id, text='üí¨ –£—Å–ø–µ—à–Ω–æ! üëç'
                                                    '\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞..'
                                                    '\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô ')
    except Exception as ex:
        logger.exception(f'Error --{ex}-- in register_user_step2')
        bot.send_message(message.from_user.id, text='üí¨ –û—à–∏–±–∫–∞! üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                                                    '\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help'
                                                    '\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô ')
    finally:
        message.text = '/start'
        start(message)


@bot.message_handler(commands=['account'])
def account(message):
    if not user_data.user_registered:
        send_error_msg_not_registered(message)
    else:
        markup = reply_keyboard_back_gen_menu()

        user = BotUser.objects.get(telegram_id=message.from_user.id)
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–ú–æ–π ID:  *{user.telegram_id}*'
                              f'\n–ò–º—è:  *{user.name}*'
                              f'\n–°–ª–æ—Ç—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: *{user.slots_for_favitems}*'
                              f'\n–°–ª–æ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: *{user.slots_for_searchitems}*',
                         reply_markup=markup,
                         parse_mode='Markdown')


@bot.message_handler(commands=['search'])
def search_items(message):
    markup = reply_keyboard_back_gen_menu()
    if not user_data.user_registered:
        send_error_msg_not_registered(message)
    else:
        try:
            user = BotUser.objects.get(telegram_id=int(message.from_user.id))
            if user.searchitems_set.exists():
                for obj in user.searchitems_set.all():

                    cat = Category.objects.get(pk=obj.category).name
                    title = obj.title if obj.title else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                    min_price = obj.min_price if obj.min_price else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                    max_price = obj.max_price if obj.max_price else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                    city = obj.city if obj.city else "–ù–µ –∑–∞–¥–∞–Ω–æ"

                    bot.send_message(message.from_user.id, f'‚öôÔ∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è* - {cat}'
                                                           f'\nüëÄ *–ù–∞–∑–≤–∞–Ω–∏–µ* - {title}'
                                                           f'\n‚¨áÔ∏è *–ú–∏–Ω.—Ü–µ–Ω–∞* - {min_price}'
                                                           f'\n‚¨ÜÔ∏è *–ú–∞–∫—Å.—Ü–µ–Ω–∞* - {max_price}'
                                                           f'\nüåè *–ì–æ—Ä–æ–¥* - {city}',
                                     reply_markup=inline_keyboard_delete_search_item(obj.pk), parse_mode='Markdown')

                bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=markup)
            else:
                bot.send_message(message.from_user.id, 'üí¨ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç..', reply_markup=markup)
        except Exception as ex:
            bot.send_message(message.from_user.id, 'üí¨ –û—à–∏–±–∫–∞! üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                                                   '\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help',
                             reply_markup=markup)
            logger.exception(f'Error --{ex}-- in search_items handler')


@bot.message_handler(commands=['help'])
def show_help(message):
    bot.send_message(message.from_user.id,
                     text='üí¨ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, '
                          '–≤ —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ '
                          '–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º --> @Irvin_ok, '
                          '–≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ø–æ—á–∫—É –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä–∞—è '
                          '–ø—Ä–∏–≤–µ–ª–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± –æ—à–∏–±–∫–µ. '
                          '–¢–∞–∫ –∂–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.',
                     parse_mode="HTML")


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞. üñ•':
        btn1 = types.KeyboardButton('–ù–æ—É—Ç–±—É–∫–∏. üíª')
        btn2 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä—ã. üíæ')
        btn3 = types.KeyboardButton('–ú–æ–Ω–∏—Ç–æ—Ä—ã. üñ•')
        btn4 = types.KeyboardButton('–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. ‚öôÔ∏è')
        btn5 = types.KeyboardButton('–û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞. üñ®')
        btn9 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        markup.row(btn5, btn9)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    elif message.text == '–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã. üì±':
        btn1 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã. üì±')
        btn2 = types.KeyboardButton('–ü–ª–∞–Ω—à–µ—Ç—ã. üïπ')
        btn3 = types.KeyboardButton('–£–º–Ω—ã–µ —á–∞—Å—ã –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä—ã. ‚åöÔ∏è')
        btn4 = types.KeyboardButton('–ù–∞—É—à–Ω–∏–∫–∏. üéß')
        btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        markup.row(btn5)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    elif message.text == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. ‚öôÔ∏è':
        btn1 = types.KeyboardButton('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã. üíé')
        btn2 = types.KeyboardButton('–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å. üí≥')
        btn3 = types.KeyboardButton('–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã. üéõ')
        btn4 = types.KeyboardButton('–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã. üìΩ')
        btn5 = types.KeyboardButton('–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è. ‚ö°Ô∏è')
        btn6 = types.KeyboardButton('SSD. üìº')
        btn7 = types.KeyboardButton('–ö—É–ª–µ—Ä—ã. üå°')
        btn8 = types.KeyboardButton('–ö–æ—Ä–ø—É—Å–∞. üì¶')
        btn9 = types.KeyboardButton('–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏. üíΩ')
        btn10 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn1, btn2, btn3)
        markup.row(btn4, btn5, btn6)
        markup.row(btn7, btn8, btn9)
        markup.row(btn10)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    elif message.text == '–û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞. üñ®':
        btn1 = types.KeyboardButton('–ú–§–£. üì†')
        btn2 = types.KeyboardButton('–ü—Ä–∏–Ω—Ç–µ—Ä—ã. üñ®')
        btn3 = types.KeyboardButton('–°–∫–∞–Ω–µ—Ä—ã. üì∑')
        btn4 = types.KeyboardButton('–§–æ—Ç–æ–ø—Ä–∏–Ω—Ç–µ—Ä—ã. üì∏')
        btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn1, btn2, btn3)
        markup.row(btn4, btn5)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    elif message.text == '–ù–∞—É—à–Ω–∏–∫–∏. üéß':
        btn1 = types.KeyboardButton('–í–Ω—É—Ç—Ä–∏–∫–∞–Ω–∞–ª—å–Ω—ã–µ. üéß')
        btn2 = types.KeyboardButton('–í–∫–ª–∞–¥—ã—à–∏. üéß')
        btn3 = types.KeyboardButton('–ù–∞–∫–ª–∞–¥–Ω—ã–µ. üéß')
        btn4 = types.KeyboardButton('–ü–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–µ. üéß')
        btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn1, btn2, btn3)
        markup.row(btn4, btn5)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    elif message.text in bot_sub_menu:
        user_data.category = get_category_from_bd(message)
        btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
        btn2 = types.KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É')
        btn3 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
        btn4 = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É')
        btn5 = types.KeyboardButton('–ó–∞–¥–∞—Ç—å –∞–≤—Ç–æ. –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
        btn6 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        markup.row(btn5, btn6)
        bot.send_message(message.from_user.id, 'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
                         reply_markup=markup)
        bot.register_next_step_handler(message, get_query)

    elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        user_data.category = None
        btn1 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞. üñ•')
        btn2 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã. üì±')
        btn3 = types.KeyboardButton('–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. üõ†')
        # btn4 = types.KeyboardButton('–•–æ–±–±–∏, —Å–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏–∑–º üéø')
        # btn5 = types.KeyboardButton('–ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó')
        markup.row(btn1, btn2)
        markup.row(btn3)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('fav'))
def callback_favorites_inline(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É(–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)"""
    if call.data:
        cat, op, pk = call.data.split('|')
        user = BotUser.objects.get(telegram_id=call.from_user.id)
        if op == 'add' and user.slots_for_favitems > 0:
            try:
                user.favoritesitems_set.create(pk_item=int(pk))
                KufarItems.objects.filter(pk=int(pk)).update(in_favorites=True)
                user.slots_for_favitems -= 1
                user.save(update_fields=['slots_for_favitems'])
                bot.send_message(chat_id=call.from_user.id, text=f'üí¨ –ì–æ—Ç–æ–≤–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤ {user.slots_for_favitems}')
            except IntegrityError as ex:
                bot.send_message(chat_id=call.from_user.id,
                                 text='üí¨ –û—à–∏–±–∫–∞!. –¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω'
                                      '\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help')
                logger.error(f'Error --{ex}-- in callback_fav_inline')

            except Exception as ex:
                bot.send_message(chat_id=call.from_user.id,
                                 text='üí¨ –û—à–∏–±–∫–∞!. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                                      '\n–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã.'
                                      '\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help')
                logger.exception(f'{ex} in callback_favorites func')

        elif op == 'add' and user.slots_for_favitems == 0:
            bot.send_message(chat_id=call.from_user.id,
                             text='üí¨ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã.'
                                  '\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help')

        elif op == 'delete':
            try:
                item = FavoritesItems.objects.get(pk_item=int(pk))
                item.delete()
                user.slots_for_favitems += 1
                user.save(update_fields=['slots_for_favitems'])
                # –°—á–∏—Ç–∞–µ–º –ø–æ pk_item –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
                obj = KufarItems.objects.get(pk=int(pk))
                cnt = Counter([FavoritesItems.objects.values_list('pk_item')])
                bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å —É –¥—Ä.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                if cnt[str(obj.pk)] <= 1:
                    # –ï—Å–ª–∏ –Ω–µ—Ç—É, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ c —Ç–æ–≤–∞—Ä–∞. –°–¥–µ–ª–∞–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤,
                    # —á—Ç–æ –±—ã –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–¥ –Ω–∞ –∫–∞–∂–¥–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.
                    KufarItems.objects.filter(pk=int(pk)).update(in_favorites=False)

                bot.send_message(chat_id=call.from_user.id, text=f'üí¨ –ì–æ—Ç–æ–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤ {user.slots_for_favitems}')
            except Exception:
                bot.send_message(chat_id=call.from_user.id,
                                 text='üí¨ –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–≤–∞—Ä —É–∂–µ *—É–¥–∞–ª–µ–Ω*.'
                                      '\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. /help')


@bot.callback_query_handler(func=lambda call: call.data.startswith('title'))
def callback_title_inline(call):
    f, cat, name = call.data.split('|')
    user_data.title = name
    bot.send_message(chat_id=call.from_user.id, text='üí¨ –ì–æ—Ç–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ.',
                     reply_markup=reply_keyboard_back_gen_menu_and_next())


@bot.callback_query_handler(func=lambda call: call.data.startswith('city'))
def callback_city_inline(call):
    f, name = call.data.split('|')
    user_data.city = name
    bot.send_message(chat_id=call.from_user.id, text='üí¨ –ì–æ—Ç–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ.',
                     reply_markup=reply_keyboard_back_gen_menu_and_next())


@bot.callback_query_handler(func=lambda call: call.data.startswith('search'))
def callback_search_inline(call):
    f, op, pk = call.data.split('|')
    user = BotUser.objects.get(telegram_id=call.from_user.id)
    obj = SearchItems.objects.get(pk=pk)
    obj.delete()
    user.slots_for_searchitems += 1
    user.save(update_fields=['slots_for_searchitems'])
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    bot.send_message(chat_id=call.from_user.id, text=f'üí¨ –ì–æ—Ç–æ–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤ {user.slots_for_searchitems}')


bot_command_menu = {'/start': start, '/favorites': show_favorites, '/register': register_user,
                    '/account': account, '/help': show_help,
                    'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': get_text_messages}
