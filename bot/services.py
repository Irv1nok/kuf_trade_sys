import logging

from bot.models import BotUser, Items
from parser.models import Category, KufarItems
from django.db.utils import IntegrityError
from time import sleep

from decouple import config

from telebot import TeleBot, types

logger = logging.getLogger(__name__)


def start_bot():
    bot = TeleBot(config('BOT_TOKEN'))
    bot_sub_menu = ['–ù–æ—É—Ç–±—É–∫–∏', '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã', '–ú–æ–Ω–∏—Ç–æ—Ä—ã', '–¢–µ–ª–µ—Ñ–æ–Ω—ã', '–ü–ª–∞–Ω—à–µ—Ç—ã', '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã', '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å',
                    '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã', '–ö—É–ª–µ—Ä—ã', '–ö–æ—Ä–ø—É—Å–∞', '–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏', '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', '–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è',
                    'SSD', '–§–æ—Ç–æ–ø—Ä–∏–Ω—Ç–µ—Ä—ã', '–°–∫–∞–Ω–µ—Ä—ã', '–ü—Ä–∏–Ω—Ç–µ—Ä—ã', '–ú–§–£']

    category = None
    user_registered = False

    def load_reply_keyboard():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn)
        return markup

    @bot.message_handler(commands=['start'])  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    def start(message):
        if BotUser.objects.filter(telegram_id=message.from_user.id).exists():
            nonlocal user_registered
            user_registered = True
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üñ•')
        btn2 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã üì±')
        # btn3 = types.KeyboardButton('–í—Å–µ –¥–ª—è –¥–µ—Ç–µ–π –∏ –º–∞–º üõç')
        # btn4 = types.KeyboardButton('–•–æ–±–±–∏, —Å–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏–∑–º üéø')
        # btn5 = types.KeyboardButton('–ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó')

        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Kufar Bot", reply_markup=markup)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')

    @bot.message_handler(commands=['favorites'])
    def show_favorites(message):
        markup = load_reply_keyboard()
        if user_registered:
            try:
                qs = BotUser.objects.get(telegram_id=message.from_user.id).items_set.all()
                if qs.count() == 0:
                    bot.send_message(message.from_user.id, text='üó£–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.. ', reply_markup=markup)
                else:
                    bot.send_message(message.from_user.id, text='üó£ –í–æ—Ç —Å–ø–∏—Å–æ–∫:', reply_markup=markup)
                    for q in qs:
                        item = KufarItems.objects.get(pk=q.pk_item)
                        send_message(user_id=message.from_user.id, item=item, favorites=True)

            except Exception as ex:
                logger.error(f'{ex} in show_favorites func')
                bot.send_message(message.from_user.id, text='üó£ –£–ø—Å!. –û—à–∏–±–∫–∞! üòî '
                                                            '\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô ')
                message.text = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                get_text_messages(message)
        else:
            send_error_msg_not_registered(message)

    @bot.message_handler(commands=['register'])
    def register_user(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        if not BotUser.objects.filter(telegram_id=message.from_user.id).exists():
            bot.send_message(message.from_user.id, text='üó£ –ó–¥–æ—Ä–æ–≤–æ!üëè –Ø —Ä–∞–¥ —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. '
                                                        '–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, '
                                                        '–∞ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –µ—Å–ª–∏ '
                                                        '–æ–Ω–∏ –ø–æ–¥–µ—à–µ–≤–µ—é—Ç –∏–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–¥–∞–Ω—ã,'
                                                        '—è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ. üëç'
                                                        '\n\nüó£ –¢–∞–∫ –∂–µ!, –≤ —Ä–∞–∑–¥–µ–ª–µ *–ò—â—É*, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å '
                                                        '–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –∏ —è —Å–æ–æ–±—â—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ—è–≤–∏—Ç—å—Å—è ‚ùóÔ∏è',
                             parse_mode='Markdown')
            markup.add('–î–∞', '–ù–µ—Ç')
            bot.send_message(message.from_user.id, 'üó£ –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? üí¨', reply_markup=markup, parse_mode='HTML')
            bot.register_next_step_handler(message, register_user_step2)
        else:
            btn = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn)
            bot.send_message(chat_id=message.from_user.id,
                             text='üó£ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üëç'
                                  '\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,'
                                  '\n*–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞* –≤ –º–µ–Ω—é –∫–æ–º–º–∞–Ω–¥ /start üÜô',
                             reply_markup=markup,
                             parse_mode='Markdown')

    def register_user_step2(message):
        try:
            BotUser.objects.create(telegram_id=message.from_user.id, name=message.from_user.first_name)
            bot.send_message(message.from_user.id, text='üó£ –£—Å–ø–µ—à–Ω–æ! üëç'
                                                        '\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞..'
                                                        '\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô ')
        except Exception as ex:
            logger.error(f'{ex} in register_user_step3')
            bot.send_message(message.from_user.id, text='üó£ –£–ø—Å!. –û—à–∏–±–∫–∞! üòî '
                                                        '\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô ')
        finally:
            message.text = '/start'
            start(message)

    @bot.message_handler(commands=['account'])
    def account(message):
        if not user_registered:
            send_error_msg_not_registered(message)
        else:
            markup = load_reply_keyboard()

            user = BotUser.objects.get(telegram_id=message.from_user.id)
            bot.send_message(chat_id=message.from_user.id,
                             text=f'–ú–æ–π *ID*:  {user.telegram_id}'
                                  f'\n*–ò–º—è*:  {user.name}',
                             reply_markup=markup,
                             parse_mode='Markdown')

    @bot.message_handler(commands=['search'])
    def add_search_items(message):
        pass

    @bot.message_handler(commands=['help'])
    def show_help(message):
        bot.send_message(message.from_user.id,
                         text='üó£ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏,'
                              '\n–≤ —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞'
                              '\n–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º --> @Irvin_ok',
                         parse_mode="HTML")

    @bot.callback_query_handler(func=lambda call: True)
    def callback_worker(call):
        if call.data:
            op, pk = call.data.split(',')
            user = BotUser.objects.get(telegram_id=call.from_user.id)
            if op == 'add':
                try:
                    user.items_set.create(pk_item=int(pk))
                except IntegrityError:
                    try:
                        item = Items.objects.get(pk_item=int(pk))
                        user.items_set.add(item)
                    except Exception:
                        bot.send_message(chat_id=call.from_user.id,
                                         text='üó£ –£–ø—Å!. –û—à–∏–±–∫–∞!.'
                                              '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å'
                                              ' —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', parse_mode='Markdown')
                except Exception as ex:
                    logger.error(f'{ex} in callback_worker func')

            elif op == 'delete':
                try:
                    item = Items.objects.get(pk_item=int(pk))
                    user.items_set.remove(item)
                    show_favorites(message=call)
                except Exception:
                    bot.send_message(chat_id=call.from_user.id, text='üó£ –£–ø—Å!. –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–≤–∞—Ä —É–∂–µ *—É–¥–∞–ª–µ–Ω*.'
                                                                     '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å'
                                                                     ' —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', parse_mode='Markdown')

    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        nonlocal category
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if message.text == '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üñ•':
            btn1 = types.KeyboardButton('–ù–æ—É—Ç–±—É–∫–∏')
            btn2 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä—ã')
            btn3 = types.KeyboardButton('–ú–æ–Ω–∏—Ç–æ—Ä—ã')
            btn4 = types.KeyboardButton('–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ')
            btn5 = types.KeyboardButton('–û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞')
            btn9 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn2, btn3, btn4, btn5, btn9)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã üì±':
            btn1 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã')
            btn2 = types.KeyboardButton('–ü–ª–∞–Ω—à–µ—Ç—ã')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn2, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ':
            btn1 = types.KeyboardButton('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã')
            btn2 = types.KeyboardButton('–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å')
            btn3 = types.KeyboardButton('–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã')
            btn4 = types.KeyboardButton('–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã')
            btn5 = types.KeyboardButton('–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è')
            btn6 = types.KeyboardButton('SSD')
            btn7 = types.KeyboardButton('–ö—É–ª–µ—Ä—ã')
            btn8 = types.KeyboardButton('–ö–æ—Ä–ø—É—Å–∞')
            btn9 = types.KeyboardButton('–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏')
            btn10 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.row(btn1, btn2, btn3, btn4)
            markup.row(btn5, btn6, btn7, btn8)
            markup.row(btn9, btn10)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞':
            btn1 = types.KeyboardButton('–ú–§–£')
            btn2 = types.KeyboardButton('–ü—Ä–∏–Ω—Ç–µ—Ä—ã')
            btn3 = types.KeyboardButton('–°–∫–∞–Ω–µ—Ä—ã')
            btn4 = types.KeyboardButton('–§–æ—Ç–æ–ø—Ä–∏–Ω—Ç–µ—Ä—ã')
            btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.row(btn1, btn2, btn3, btn4)
            markup.row(btn5)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text in bot_sub_menu:
            category = get_category_from_bd(message)
            btn1 = types.KeyboardButton('5')
            btn2 = types.KeyboardButton('10')
            btn3 = types.KeyboardButton('15')
            btn4 = types.KeyboardButton('20')
            btn5 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn2, btn3, btn4, btn5)
            bot.send_message(message.from_user.id, 'üó£ –°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?'
                                                   '\n–í—ã–±–µ—Ä–∏—Ç–µ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç *—á–∏—Å–ª–æ:*',
                             reply_markup=markup,
                             parse_mode="Markdown")
            bot.register_next_step_handler(message, get_query_params)

        elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            category = None
            btn1 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üñ•')
            btn2 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã üì±')
            # btn3 = types.KeyboardButton('–í—Å–µ –¥–ª—è –¥–µ—Ç–µ–π –∏ –º–∞–º üõç')
            # btn4 = types.KeyboardButton('–•–æ–±–±–∏, —Å–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏–∑–º üéø')
            # btn5 = types.KeyboardButton('–ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó')
            markup.add(btn1, btn2)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    def send_error_msg_not_registered(message):
        markup = load_reply_keyboard()
        bot.send_message(chat_id=message.from_user.id,
                         text='üó£ –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üëÄ'
                              '\n–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è..'
                              '\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,'
                              '\n*–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞* –≤ –º–µ–Ω—é –∫–æ–º–º–∞–Ω–¥ /start üÜô',
                         reply_markup=markup,
                         parse_mode='Markdown')

    def get_query_params(message):
        if msg := bot_command_menu.get(message.text):
            return msg(message)
        try:
            msg_count = int(message.text)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            deleted = bot.reply_to(message, 'üó£ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è? üí¨', reply_markup=markup)
            bot.register_next_step_handler(deleted, get_query_data, msg_count)
        except ValueError:
            msg_count = bot.reply_to(message, 'üó£ *–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:* üí¨', parse_mode="Markdown")
            bot.register_next_step_handler(msg_count, get_query_params)

    def get_query_data(message, msg_count):
        del_obj = True if message.text == '–î–∞' else False

        qs = KufarItems.objects.filter(cat_id=category).filter(deleted=del_obj).order_by(
            '-date' if not del_obj else "-time_create")
        qs_generator = init_qs_generator(qs)
        query_data(message, qs_generator, msg_count)

    def init_qs_generator(qs):
        for q in qs:
            yield q

    def query_data(message, qs_generator, msg_count):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if msg := bot_command_menu.get(message.text):
            return msg(message)

        count = 0
        while count != msg_count:
            try:
                query = next(qs_generator)
                send_message(user_id=message.from_user.id, item=query)
                count += 1
            except Exception as ex:
                logger.error(f'Exception - {ex} in show_query_data')
                bot.send_message(message.from_user.id, 'üó£ –£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
                message.text = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                return get_text_messages(message)

        markup.add(f'–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {msg_count}', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.reply_to(message, 'üó£ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é? üí¨', reply_markup=markup)
        bot.register_next_step_handler(msg, query_data, qs_generator, msg_count)

    def send_message(user_id, item, favorites=False):
        nonlocal user_registered
        if item.new_price:
            if item.new_price > item.base_price:
                new_price = f'{item.new_price} üî∫'
            else:
                new_price = f'{item.new_price} ‚ùóÔ∏è ‚¨áÔ∏è üî•'
        else:
            new_price = '–ù–µ—Ç'

        if user_registered:
            markup = types.InlineKeyboardMarkup()
            if not favorites:
                markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                                                      callback_data=f'add,{item.pk}'))
            else:
                markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
                                                      callback_data=f'delete,{item.pk}'))

        bot.send_message(user_id, f'<b>{item.title}</b>'
                                  f'\n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {item.base_price}'
                                  f'\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}'
                                  f'\n–ì–æ—Ä–æ–¥: {item.city}'
                                  f'\n–ü—Ä–æ–¥–∞–Ω–æ: {"–î–∞" if item.deleted else "–ù–µ—Ç"}'
                                  f'\n–î–∞—Ç–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏: {item.date}'
                                  f'\n–°—Å—ã–ª–∫–∞: {item.url}',
                         parse_mode='HTML',
                         reply_markup=markup if user_registered else None)

        sleep(0.1)
        logger.info('Bot send_message')

    def get_category_from_bd(message):
        try:
            category = Category.objects.get(name=message.text)
        except Category.DoesNotExist as ex:
            bot.send_message(message.from_user.id, 'üó£ *–£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π* üí¨', parse_mode="Markdown")
            logger.error(f'{ex} in get_category_from_bd')
        return category.pk

    bot_command_menu = {'/start': start, '/favorites': show_favorites, '/register': register_user,
                        '/account': account, '/help': show_help,
                        'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': get_text_messages}

    bot.polling(none_stop=True, interval=0)
