from parser.models import Category, KufarItems
from time import sleep

from decouple import config

from telebot import TeleBot, types


def start_bot():
    cat = None
    bot = TeleBot(config('BOT_TOKEN'))

    @bot.message_handler(commands=['start'])  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    def start(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üñ•")
        btn2 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã üì±')
        btn3 = types.KeyboardButton('–í—Å–µ –¥–ª—è –¥–µ—Ç–µ–π –∏ –º–∞–º üõç')
        btn4 = types.KeyboardButton('–•–æ–±–±–∏, —Å–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏–∑–º üéø')
        btn5 = types.KeyboardButton('–ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó')

        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id, "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Kufar bot", reply_markup=markup)
        bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª')

    @bot.message_handler(commands=['my_id'])
    def get_my_id(message):
        bot.send_message(message.from_user.id, text=f'–í–∞—à ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π üîÑ{message.from_user.id}')

    @bot.message_handler(commands=['help'])
    def show_help(message):
        bot.send_message(message.from_user.id, text='–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏,'
                                                    '\n–≤ —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.'
                                                    '\n–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π'
                                                    '\n–ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π ID, –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ'
                                                    '\n–û–±—ä—è–≤–ª–µ–Ω–∏—è->–¥–µ—Ç–∞–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ.')

    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        nonlocal cat
        if message.text == '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üñ•':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ù–æ—É—Ç–±—É–∫–∏')
            btn2 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä—ã')
            btn3 = types.KeyboardButton('–ú–æ–Ω–∏—Ç–æ—Ä—ã')
            btn4 = types.KeyboardButton('–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ')
            btn9 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn2, btn3, btn4, btn9)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã üì±':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã')
            btn2 = types.KeyboardButton('–ü–ª–∞–Ω—à–µ—Ç—ã')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn2, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–¢–µ–ª–µ—Ñ–æ–Ω—ã':
            cat = get_category_from_bd(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï')
            # btn2 = types.KeyboardButton('–î–∞–ª–µ–µ ->')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ü–ª–∞–Ω—à–µ—Ç—ã':
            cat = get_category_from_bd(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï')
            # btn2 = types.KeyboardButton('–î–∞–ª–µ–µ ->')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ù–æ—É—Ç–±—É–∫–∏':
            cat = get_category_from_bd(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï')
            # btn2 = types.KeyboardButton('–î–∞–ª–µ–µ ->')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã':
            cat = get_category_from_bd(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï')
            # btn2 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ú–æ–Ω–∏—Ç–æ—Ä—ã':
            cat = get_category_from_bd(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï')
            # btn2 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ':
            cat = get_category_from_bd(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï')
            # btn2 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä')
            btn3 = types.KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üÜï':
            count = bot.reply_to(message, '–°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: üí¨')
            bot.register_next_step_handler(count, get_query_params)

        elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            cat = None
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üñ•')
            btn2 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã üì±')
            btn3 = types.KeyboardButton('–í—Å–µ –¥–ª—è –¥–µ—Ç–µ–π –∏ –º–∞–º üõç')
            btn4 = types.KeyboardButton('–•–æ–±–±–∏, —Å–ø–æ—Ä—Ç –∏ —Ç—É—Ä–∏–∑–º üéø')
            btn5 = types.KeyboardButton('–ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó')
            markup.add(btn1, btn2, btn3, btn4, btn5)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

    def get_query_params(message):
        try:
            msg_count = int(message.text)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            deleted = bot.reply_to(message, '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è? üí¨', reply_markup=markup)
            bot.register_next_step_handler(deleted, get_query_data, msg_count)
        except ValueError:
            msg_count = bot.reply_to(message, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: üí¨')
            bot.register_next_step_handler(msg_count, get_query_params)
            return

    def get_query_data(message, msg_count):
        del_obj = True if message.text == '–î–∞' else False

        query = KufarItems.objects.filter(cat_id=cat).filter(deleted=del_obj).order_by(
            '-date' if not del_obj else "-time_create")
        qs_generator = init_qs_generator(query)
        show_query_data(message, qs_generator, msg_count)

    def init_qs_generator(query):
        for q in query:
            yield q

    def show_query_data(message, qs_generator, msg_count):
        if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            get_text_messages(message)
            return
        count = 0
        while count != msg_count:
            q = next(qs_generator)
            bot.send_message(message.from_user.id, f'<b>{q.title}</b>'
                                                   f'\n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {q.base_price}'
                                                   f'\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {q.new_price if q.new_price else "–ù–µ—Ç"}'
                                                   f'\n–ì–æ—Ä–æ–¥: {q.city}'
                                                   f'\n–ü—Ä–æ–¥–∞–Ω–æ: {"–î–∞" if q.deleted else "–ù–µ—Ç"}'
                                                   f'\n–î–∞—Ç–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏: {q.date}'
                                                   f'\n–°—Å—ã–ª–∫–∞: {q.url}',
                             parse_mode='HTML')
            count += 1
            sleep(0.1)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(f'–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {msg_count} ?', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.reply_to(message, '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é? üí¨', reply_markup=markup)
        bot.register_next_step_handler(msg, show_query_data, qs_generator, msg_count)

    def get_category_from_bd(message):
        try:
            category = Category.objects.get(name=message.text)
        except Category.DoesNotExist:
            bot.send_message(message.from_user.id, '–£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π üí¨')
        return category.pk


    bot.polling(none_stop=True, interval=0)
